[{"path":"https://primer-e.github.io/probabilityDistributions/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Punnett. Author, maintainer. PRIMER-e. Copyright holder, funder.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Punnett (2021). probabilityDistributions: Useful probability distributions. https://primer-e.github.io/probabilityDistributions, https://github.com/PRIMER-e/probabilityDistributions.","code":"@Manual{,   title = {probabilityDistributions: Useful probability distributions},   author = {Andrew Punnett},   year = {2021},   note = {https://primer-e.github.io/probabilityDistributions, https://github.com/PRIMER-e/probabilityDistributions}, }"},{"path":"https://primer-e.github.io/probabilityDistributions/index.html","id":"probabilitydistributions","dir":"","previous_headings":"","what":"Useful probability distributions","title":"Useful probability distributions","text":"goal probabilityDistributions provide library useful probability distributions R Stan.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Useful probability distributions","text":"can install development version probabilityDistributions GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"PRIMER-e/probabilityDistributions\")"},{"path":"https://primer-e.github.io/probabilityDistributions/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Useful probability distributions","text":"basic example shows calculate Zero-Inflated Poisson (ZIP) probability mass using R Stan:","code":"library(probabilityDistributions) library(rstan) #> Loading required package: StanHeaders #> Loading required package: ggplot2 #> rstan (Version 2.21.2, GitRev: 2e1f913d3ca3) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> Do not specify '-march=native' in 'LOCAL_CPPFLAGS' or a Makevars file  stan_model_code <- paste0(\"functions { \",                            zi_poisson_lpmf_stan[[\"source_code\"]],                            \" }\",                           sep = \"\\n\")  model_listing <- stanc(model_code = stan_model_code)  stan_function_names <- expose_stan_functions(model_listing)  print(stan_function_names) #> [1] \"zi_poisson_lpmf\"  zi_poisson_lpmf(5, 7.5, 0.2) #> [1] -2.43612  dzip(5, 7.5, 0.2, log = TRUE) #> [1] -2.43612"},{"path":"https://primer-e.github.io/probabilityDistributions/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Useful probability distributions","text":"making changes run following command committing rebuild package readme, also home page.","code":"devtools::build_readme()"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dnbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson Probability Mass Function — dnbinom","title":"Poisson Probability Mass Function — dnbinom","text":"available stats package. See dnbinom details","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dpois.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson Probability Mass Function — dpois","title":"Poisson Probability Mass Function — dpois","text":"available stats package. See dpois details","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinb.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Negative Binomial Probability Mass — dzinb","title":"Zero-inflated Negative Binomial Probability Mass — dzinb","text":"Zero-inflated Negative Binomial Probability Mass","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Negative Binomial Probability Mass — dzinb","text":"","code":"dzinb(x, size, prob, mu, pi, log = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Negative Binomial Probability Mass — dzinb","text":"x vector (non-negative integer) values. size target number successful trials, dispersion parameter (shape parameter gamma mixing distribution). Must strictly positive, need integer. prob probability success trial. 0 < prob <= 1. mu alternative parametrization via mean: see ‘Details’. pi vector (real lying [0, 1]) zero-inflation parameters. log logical; TRUE, probabilities, p, given log(p).","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Negative Binomial Probability Mass — dzinb","text":"(log) probability mass x, given lambda pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Negative Binomial Linked Probability Mass — dzinbl","title":"Zero-inflated Negative Binomial Linked Probability Mass — dzinbl","text":"Zero-inflated Negative Binomial Linked Probability Mass","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Negative Binomial Linked Probability Mass — dzinbl","text":"","code":"dzinbl(x, size, prob, mu, gamma0, gamma1, log = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Negative Binomial Linked Probability Mass — dzinbl","text":"x vector (non-negative integer) values. size target number successful trials, dispersion parameter (shape parameter gamma mixing distribution). Must strictly positive, need integer. prob probability success trial. 0 < prob <= 1. mu alternative parametrization via mean: see ‘Details’. gamma0 zero-inflation mean link intercept. gamma1 zero-inflation mean link gradient. log logical; TRUE, probabilities, p, given log(p).","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Negative Binomial Linked Probability Mass — dzinbl","text":"(log) probability mass x, given lambda pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinbll.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Negative Binomial Log-linked Probability Mass — dzinbll","title":"Zero-inflated Negative Binomial Log-linked Probability Mass — dzinbll","text":"Zero-inflated Negative Binomial Log-linked Probability Mass","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinbll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Negative Binomial Log-linked Probability Mass — dzinbll","text":"","code":"dzinbll(x, size, prob, mu, gamma0, gamma1, log = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinbll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Negative Binomial Log-linked Probability Mass — dzinbll","text":"x vector (non-negative integer) values. size target number successful trials, dispersion parameter (shape parameter gamma mixing distribution). Must strictly positive, need integer. prob probability success trial. 0 < prob <= 1. mu alternative parametrization via mean: see ‘Details’. gamma0 zero-inflation mean link intercept. gamma1 zero-inflation mean link gradient. log logical; TRUE, probabilities, p, given log(p).","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzinbll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Negative Binomial Log-linked Probability Mass — dzinbll","text":"(log) probability mass x, given lambda pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzip.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson Probability Mass Function — dzip","title":"Zero-inflated Poisson Probability Mass Function — dzip","text":"Zero-inflated Poisson Probability Mass Function","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson Probability Mass Function — dzip","text":"","code":"dzip(x, lambda, pi, log = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Poisson Probability Mass Function — dzip","text":"x vector (non-negative integer) values. lambda vector (non-negative) means. pi vector (real lying [0, 1]) zero-inflation parameters. log logical; TRUE, probabilities, p, given log(p).","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson Probability Mass Function — dzip","text":"(log) probability mass x, given lambda pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzipl.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson Linked Probability Mass Function — dzipl","title":"Zero-inflated Poisson Linked Probability Mass Function — dzipl","text":"Zero-inflated Poisson Linked Probability Mass Function","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzipl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson Linked Probability Mass Function — dzipl","text":"","code":"dzipl(x, lambda, gamma0, gamma1, log = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzipl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Poisson Linked Probability Mass Function — dzipl","text":"x vector (non-negative integer) values. lambda vector (non-negative) means. gamma0 zero-inflation mean link intercept. gamma1 zero-inflation mean link gradient. log logical; TRUE, probabilities, p, given log(p).","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzipl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson Linked Probability Mass Function — dzipl","text":"(log) probability mass x, given lambda pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzipll.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson Linked Probability Mass Function — dzipll","title":"Zero-inflated Poisson Linked Probability Mass Function — dzipll","text":"Zero-inflated Poisson Linked Probability Mass Function","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzipll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson Linked Probability Mass Function — dzipll","text":"","code":"dzipll(x, lambda, gamma0, gamma1, log = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzipll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Poisson Linked Probability Mass Function — dzipll","text":"x vector (non-negative integer) values. lambda vector (non-negative) means. gamma0 zero-inflation mean link intercept. gamma1 zero-inflation mean link gradient. log logical; TRUE, probabilities, p, given log(p).","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/dzipll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson Linked Probability Mass Function — dzipll","text":"(log) probability mass x, given lambda pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/neg_binomial_2_lpmf_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative Binomial Log Probability Mass Function Stan Code — neg_binomial_2_lpmf_stan","title":"Negative Binomial Log Probability Mass Function Stan Code — neg_binomial_2_lpmf_stan","text":"two negative binomial density functions built Stan: second one uses mean -dispersion parameterisation familiar ecologists. See https://mc-stan.org/docs/2_19/functions-reference/negative-binomial-distribution.html https://mc-stan.org/docs/2_19/functions-reference/nbalt.html details.","code":"real neg_binomial_lpmf(ints n | reals alpha, reals beta) real neg_binomial_2_lpmf(ints y | reals mu, reals phi)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/poisson_lpmf_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson Log Probability Mass Function Stan Code — poisson_lpmf_stan","title":"Poisson Log Probability Mass Function Stan Code — poisson_lpmf_stan","text":"poisson_lpmf function built Stan. See https://mc-stan.org/docs/2_28/functions-reference/poisson.html details.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/probabilityDistributions-package.html","id":null,"dir":"Reference","previous_headings":"","what":"probabilityDistributions: Useful probability distributions — probabilityDistributions-package","title":"probabilityDistributions: Useful probability distributions — probabilityDistributions-package","text":"Useful probability distributions matching Stan code.","code":""},{"path":[]},{"path":"https://primer-e.github.io/probabilityDistributions/reference/probabilityDistributions-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"probabilityDistributions: Useful probability distributions — probabilityDistributions-package","text":"Maintainer: Andrew Punnett andrew@primer-e.co.nz (ORCID) contributors: PRIMER-e [copyright holder, funder]","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qnbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson Quantile Function — qnbinom","title":"Poisson Quantile Function — qnbinom","text":"available stats package. See qnbinom details.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qpois.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson Quantile Function — qpois","title":"Poisson Quantile Function — qpois","text":"available stats package. See qpois details.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinb.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Negative Binomial Quantile Function — qzinb","title":"Zero-inflated Negative Binomial Quantile Function — qzinb","text":"Zero-inflated Negative Binomial Quantile Function","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Negative Binomial Quantile Function — qzinb","text":"","code":"qzinb(p, size, prob, mu, pi, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Negative Binomial Quantile Function — qzinb","text":"p vector quantiles. size target number successful trials, dispersion parameter (shape parameter gamma mixing distribution). Must strictly positive, need integer. prob probability success trial. 0 < prob <= 1. mu alternative parametrization via mean: see ‘Details’. pi vector (\\([0, 1]\\)) zero-inflation parameters. lower.tail logical; TRUE (default), probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). log.p logical; TRUE, probabilities p. affect pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Negative Binomial Quantile Function — qzinb","text":"vector quantiles, coincide respective probability p.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Negative Linked Binomial Quantile Function — qzinbl","title":"Zero-inflated Negative Linked Binomial Quantile Function — qzinbl","text":"Zero-inflated Negative Linked Binomial Quantile Function","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Negative Linked Binomial Quantile Function — qzinbl","text":"","code":"qzinbl(p, size, prob, mu, gamma0, gamma1, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Negative Linked Binomial Quantile Function — qzinbl","text":"p vector quantiles. size target number successful trials, dispersion parameter (shape parameter gamma mixing distribution). Must strictly positive, need integer. prob probability success trial. 0 < prob <= 1. mu alternative parametrization via mean: see ‘Details’. gamma0 zero-inflation mean link intercept. gamma1 zero-inflation mean link gradient. lower.tail logical; TRUE (default), probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). log.p logical; TRUE, probabilities p. affect pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Negative Linked Binomial Quantile Function — qzinbl","text":"vector quantiles, coincide respective probability p.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinbll.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Negative Log-linked Binomial Quantile Function — qzinbll","title":"Zero-inflated Negative Log-linked Binomial Quantile Function — qzinbll","text":"Zero-inflated Negative Log-linked Binomial Quantile Function","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinbll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Negative Log-linked Binomial Quantile Function — qzinbll","text":"","code":"qzinbll(p, size, prob, mu, gamma0, gamma1, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinbll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Negative Log-linked Binomial Quantile Function — qzinbll","text":"p vector quantiles. size target number successful trials, dispersion parameter (shape parameter gamma mixing distribution). Must strictly positive, need integer. prob probability success trial. 0 < prob <= 1. mu alternative parametrization via mean: see ‘Details’. gamma0 zero-inflation mean link intercept. gamma1 zero-inflation mean link gradient. lower.tail logical; TRUE (default), probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). log.p logical; TRUE, probabilities p. affect pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzinbll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Negative Log-linked Binomial Quantile Function — qzinbll","text":"vector quantiles, coincide respective probability p.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzip.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson Quantile Function — qzip","title":"Zero-inflated Poisson Quantile Function — qzip","text":"Zero-inflated Poisson Quantile Function","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson Quantile Function — qzip","text":"","code":"qzip(p, lambda, pi, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Poisson Quantile Function — qzip","text":"p vector quantiles. lambda vector (non-negative) means. pi vector (\\([0, 1]\\)) zero-inflation parameters. lower.tail logical; TRUE (default), probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). log.p logical; TRUE, probabilities p. affect pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson Quantile Function — qzip","text":"vector quantiles, coincide respective probability p.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzipl.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson Linked Quantile Function — qzipl","title":"Zero-inflated Poisson Linked Quantile Function — qzipl","text":"Zero-inflated Poisson Linked Quantile Function","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzipl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson Linked Quantile Function — qzipl","text":"","code":"qzipl(p, lambda, gamma0, gamma1, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzipl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Poisson Linked Quantile Function — qzipl","text":"p vector quantiles. lambda vector (non-negative) means. gamma0 zero-inflation mean link intercept. gamma1 zero-inflation mean link gradient. lower.tail logical; TRUE (default), probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). log.p logical; TRUE, probabilities p. affect pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzipl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson Linked Quantile Function — qzipl","text":"vector quantiles, coincide respective probability p.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzipll.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson Linked Quantile Function — qzipll","title":"Zero-inflated Poisson Linked Quantile Function — qzipll","text":"Zero-inflated Poisson Linked Quantile Function","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzipll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson Linked Quantile Function — qzipll","text":"","code":"qzipll(p, lambda, gamma0, gamma1, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzipll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Poisson Linked Quantile Function — qzipll","text":"p vector quantiles. lambda vector (non-negative) means. gamma0 zero-inflation mean link intercept. gamma1 zero-inflation mean link gradient. lower.tail logical; TRUE (default), probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). log.p logical; TRUE, probabilities p. affect pi.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/qzipll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson Linked Quantile Function — qzipll","text":"vector quantiles, coincide respective probability p.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_linked_lpmf_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Negative-binomial Linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_linked_lpmf_stan","title":"Zero-inflated Negative-binomial Linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_linked_lpmf_stan","text":"Zero-inflated Negative-binomial Linked Log Probability Mass Function Stan Code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_linked_lpmf_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Negative-binomial Linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_linked_lpmf_stan","text":"","code":"zi_neg_binomial_2_linked_lpmf_stan"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_linked_lpmf_stan.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zero-inflated Negative-binomial Linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_linked_lpmf_stan","text":"object class list length 1.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_linked_lpmf_stan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Negative-binomial Linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_linked_lpmf_stan","text":"string containing Stan source-code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_linked_lpmf_stan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated Negative-binomial Linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_linked_lpmf_stan","text":"","code":"cat(zi_neg_binomial_2_linked_lpmf_stan[[\"source_code\"]]) #> real zi_neg_binomial_2_linked_lpmf(int[] n, vector mu, vector phi, vector gamma0, vector gamma1) { #>  #>   real probability_mass = 0; #>  #>   for (i in 1:size(n)) { #>     real pi = logit(gamma0[i] + gamma1[i] * lambda[i]) #>  #>     // TODO: Would this be more efficient if it used log_sum_exp? #>     probability_mass += log(pi * (n[i] == 0) + (1 - pi) * exp(neg_binomial_2_lpmf(n[i] | mu[i], phi[i]))); #>   } #>  #>   return probability_mass; #> }"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_log_linked_lpmf_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Negative-binomial Log-linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_log_linked_lpmf_stan","title":"Zero-inflated Negative-binomial Log-linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_log_linked_lpmf_stan","text":"Zero-inflated Negative-binomial Log-linked Log Probability Mass Function Stan Code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_log_linked_lpmf_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Negative-binomial Log-linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_log_linked_lpmf_stan","text":"","code":"zi_neg_binomial_2_log_linked_lpmf_stan"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_log_linked_lpmf_stan.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zero-inflated Negative-binomial Log-linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_log_linked_lpmf_stan","text":"object class list length 1.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_log_linked_lpmf_stan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Negative-binomial Log-linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_log_linked_lpmf_stan","text":"string containing Stan source-code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_log_linked_lpmf_stan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated Negative-binomial Log-linked Log Probability Mass Function Stan Code — zi_neg_binomial_2_log_linked_lpmf_stan","text":"","code":"cat(zi_neg_binomial_2_log_linked_lpmf_stan[[\"source_code\"]]) #> real zi_neg_binomial_2_log_linked_lpmf(int[] n, vector mu, vector phi, vector gamma0, vector gamma1) { #>  #>   real probability_mass = 0; #>  #>   for (i in 1:size(n)) { #>     real pi = logit(gamma0[i] + gamma1[i] * log(lambda[i])) #>  #>     // TODO: Would this be more efficient if it used log_sum_exp? #>     probability_mass += log(pi * (n[i] == 0) + (1 - pi) * exp(neg_binomial_2_lpmf(n[i] | mu[i], phi[i]))); #>   } #>  #>   return probability_mass; #> }"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_lpmf_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Negative-binomial Log Probability Mass Function Stan Code — zi_neg_binomial_2_lpmf_stan","title":"Zero-inflated Negative-binomial Log Probability Mass Function Stan Code — zi_neg_binomial_2_lpmf_stan","text":"Zero-inflated Negative-binomial Log Probability Mass Function Stan Code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_lpmf_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Negative-binomial Log Probability Mass Function Stan Code — zi_neg_binomial_2_lpmf_stan","text":"","code":"zi_neg_binomial_2_lpmf_stan"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_lpmf_stan.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zero-inflated Negative-binomial Log Probability Mass Function Stan Code — zi_neg_binomial_2_lpmf_stan","text":"object class list length 1.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_lpmf_stan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Negative-binomial Log Probability Mass Function Stan Code — zi_neg_binomial_2_lpmf_stan","text":"string containing Stan source-code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_neg_binomial_2_lpmf_stan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated Negative-binomial Log Probability Mass Function Stan Code — zi_neg_binomial_2_lpmf_stan","text":"","code":"cat(zi_neg_binomial_2_lpmf_stan[[\"source_code\"]]) #> real zi_neg_binomial_2_lpmf(int[] n, vector mu, vector phi, vector pi) { #>  #>   real probability_mass = 0; #>  #>   for (i in 1:size(n)) { #>     if (pi[i] < 0 || pi[i] > 1) { #>       reject(\"pi should be in [0, 1]; pi=\", pi[i]); #>     } #>  #>     // TODO: Would this be more efficient if it used log_sum_exp? #>     probability_mass += log(pi[i] * (n[i] == 0) + (1 - pi[i]) * exp(neg_binomial_2_lpmf(n[i] | mu[i], phi[i]))); #>   } #>  #>   return probability_mass; #> }"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_linked_lpmf_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_linked_lpmf_stan","title":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_linked_lpmf_stan","text":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_linked_lpmf_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_linked_lpmf_stan","text":"","code":"zi_poisson_linked_lpmf_stan"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_linked_lpmf_stan.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_linked_lpmf_stan","text":"object class list length 1.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_linked_lpmf_stan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_linked_lpmf_stan","text":"string containing Stan source-code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_linked_lpmf_stan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_linked_lpmf_stan","text":"","code":"cat(zi_poisson_linked_lpmf_stan[[\"source_code\"]]) #> real zi_poisson_linked_lpmf(int[] n, vector lambda, vector gamma0, vector gamma1) { #>  #>   real probability_mass = 0; #>  #>   for (i in 1:size(n)) { #>     real pi = logit(gamma0 + gamma1 * lambda[i]) #>  #>     // TODO: Would this be more efficient if it used log_sum_exp? #>     probability_mass += log(pi * (n[i] == 0) + (1 - pi) * exp(poisson_lpmf(n[i] | lambda[i]))); #>   } #>  #>   return probability_mass; #> }"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_log_linked_lpmf_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_log_linked_lpmf_stan","title":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_log_linked_lpmf_stan","text":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_log_linked_lpmf_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_log_linked_lpmf_stan","text":"","code":"zi_poisson_log_linked_lpmf_stan"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_log_linked_lpmf_stan.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_log_linked_lpmf_stan","text":"object class list length 1.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_log_linked_lpmf_stan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_log_linked_lpmf_stan","text":"string containing Stan source-code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_log_linked_lpmf_stan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated Poisson Linked Log Probability Mass Function Stan Code — zi_poisson_log_linked_lpmf_stan","text":"","code":"cat(zi_poisson_log_linked_lpmf_stan[[\"source_code\"]]) #> real zi_poisson_log_linked_lpmf(int[] n, vector lambda, vector gamma0, vector gamma1) { #>  #>   real probability_mass = 0; #>  #>   for (i in 1:size(n)) { #>     real pi = logit(gamma0[i] + gamma1[i] * log(lambda[i])) #>  #>     // TODO: Would this be more efficient if it used log_sum_exp? #>     probability_mass += log(pi * (n[i] == 0) + (1 - pi) * exp(poisson_lpmf(n[i] | lambda[i]))); #>   } #>  #>   return probability_mass; #> }"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_lpmf_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson Log Probability Mass Function Stan Code — zi_poisson_lpmf_stan","title":"Zero-inflated Poisson Log Probability Mass Function Stan Code — zi_poisson_lpmf_stan","text":"Zero-inflated Poisson Log Probability Mass Function Stan Code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_lpmf_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson Log Probability Mass Function Stan Code — zi_poisson_lpmf_stan","text":"","code":"zi_poisson_lpmf_stan"},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_lpmf_stan.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zero-inflated Poisson Log Probability Mass Function Stan Code — zi_poisson_lpmf_stan","text":"object class list length 1.","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_lpmf_stan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson Log Probability Mass Function Stan Code — zi_poisson_lpmf_stan","text":"string containing Stan source-code","code":""},{"path":"https://primer-e.github.io/probabilityDistributions/reference/zi_poisson_lpmf_stan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated Poisson Log Probability Mass Function Stan Code — zi_poisson_lpmf_stan","text":"","code":"cat(zi_poisson_lpmf_stan[[\"source_code\"]]) #> // The log probability mass at x, given lambda and pi. #> // lambda is the (non-negative) mean of the poisson distribution. #> // pi is the amount of zero-inflation, which should lie within the range [0, 1]. #> real zi_poisson_lpmf(int[] n, vector lambda, vector pi) { #>  #>   real probability_mass = 0; #>  #>   for (i in 1:size(n)) { #>     if (pi[i] < 0 || pi[i] > 1) { #>       reject(\"pi should be in [0, 1]; pi=\", pi[i]); #>     } #>  #>     // TODO: Would this be more efficient if it used log_sum_exp? #>     probability_mass += log(pi[i] * (n[i] == 0) + (1 - pi[i]) * exp(poisson_lpmf(n[i] | lambda[i]))); #>   } #>  #>   return probability_mass; #> }"}]
